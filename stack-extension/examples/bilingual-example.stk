// Exemplo de código bilíngue em Stack Extensão
// Mistura português e inglês naturalmente

// Função em português
funcao calcularMedia(numeros) {
    se (numeros.length igual 0) {
        retornar 0
    }
    
    variavel soma = 0
    para (variavel i = 0; i menor numeros.length; i = i mais 1) {
        soma = soma mais numeros[i]
    }
    
    retornar soma dividido numeros.length
}

// Função em inglês
function calculateSum(numbers) {
    if (numbers.length === 0) {
        return 0
    }
    
    let sum = 0
    for (let i = 0; i < numbers.length; i++) {
        sum = sum + numbers[i]
    }
    
    return sum
}

// Classe híbrida (português + inglês)
classe CalculadoraAvancada {
    variavel historico = []
    
    // Método em português
    funcao somar(a, b) {
        variavel resultado = a mais b
        this.adicionarAoHistorico('soma', a, b, resultado)
        retornar resultado
    }
    
    // Método em inglês
    function subtract(a, b) {
        const result = a - b
        this.addToHistory('subtract', a, b, result)
        return result
    }
    
    // Método híbrido
    funcao multiplicar(a, b) {
        const resultado = a * b
        this.addToHistory('multiplicar', a, b, resultado)
        return resultado
    }
    
    // Método privado em português
    funcao adicionarAoHistorico(operacao, a, b, resultado) {
        this.historico.push({
            operacao: operacao,
            a: a,
            b: b,
            resultado: resultado,
            timestamp: new Date()
        })
    }
    
    // Método privado em inglês
    function addToHistory(operation, a, b, result) {
        this.historico.push({
            operacao: operation,
            a: a,
            b: b,
            resultado: result,
            timestamp: new Date()
        })
    }
    
    // Getter em português
    funcao obterHistorico() {
        retornar this.historico
    }
    
    // Getter em inglês
    function getHistory() {
        return this.historico
    }
}

// Componente web bilíngue
componente MeuComponente {
    variavel titulo = "Bem-vindo / Welcome"
    variavel mensagem = "Este é um exemplo bilíngue"
    
    funcao render() {
        retornar `
            <div class="bilingual-component">
                <h1>{{titulo}}</h1>
                <p>{{mensagem}}</p>
                <button onclick="this.toggleLanguage()">
                    {{currentLanguage === 'pt' ? 'English' : 'Português'}}
                </button>
            </div>
        `
    }
    
    funcao toggleLanguage() {
        se (this.currentLanguage igual 'pt') {
            this.titulo = "Welcome / Bem-vindo"
            this.mensagem = "This is a bilingual example"
            this.currentLanguage = 'en'
        } senao {
            this.titulo = "Bem-vindo / Welcome"
            this.mensagem = "Este é um exemplo bilíngue"
            this.currentLanguage = 'pt'
        }
    }
}

// Função principal
funcao main() {
    imprimir("=== Exemplo Bilíngue Stack Extensão ===")
    
    // Usar funções em português
    variavel numeros = [1, 2, 3, 4, 5]
    variavel media = calcularMedia(numeros)
    imprimir("Média (português): " + media)
    
    // Usar funções em inglês
    variavel soma = calculateSum(numeros)
    imprimir("Soma (inglês): " + soma)
    
    // Usar classe híbrida
    variavel calc = novo CalculadoraAvancada()
    
    // Métodos em português
    variavel resultado1 = calc.somar(10, 5)
    imprimir("Soma (português): " + resultado1)
    
    // Métodos em inglês
    variavel resultado2 = calc.subtract(10, 3)
    imprimir("Subtração (inglês): " + resultado2)
    
    // Método híbrido
    variavel resultado3 = calc.multiplicar(4, 7)
    imprimir("Multiplicação (híbrido): " + resultado3)
    
    // Mostrar histórico
    imprimir("Histórico:")
    variavel historico = calc.obterHistorico()
    para (variavel i = 0; i menor historico.length; i = i mais 1) {
        variavel item = historico[i]
        imprimir(`${item.operacao}: ${item.a} e ${item.b} = ${item.resultado}`)
    }
    
    imprimir("\n=== Fim do Exemplo Bilíngue ===")
}

// Executar
main()