// Exemplo de funcionalidades de IA integradas
// Demonstra como a IA pode ajudar no desenvolvimento

// Fun√ß√£o para demonstrar completa√ß√£o de c√≥digo
funcao exemploCompletacao() {
    imprimir("=== Completa√ß√£o de C√≥digo com IA ===")
    
    // O c√≥digo abaixo seria completado automaticamente pela IA
    variavel numeros = [1, 2, 3, 4, 5]
    variavel soma = 0
    
    // IA sugere: para (variavel i = 0; i menor numeros.length; i = i mais 1)
    para (variavel i = 0; i menor numeros.length; i = i mais 1) {
        // IA sugere: soma = soma mais numeros[i]
        soma = soma mais numeros[i]
    }
    
    imprimir("Soma calculada: " + soma)
}

// Fun√ß√£o para demonstrar an√°lise de c√≥digo
funcao exemploAnalise() {
    imprimir("=== An√°lise de C√≥digo com IA ===")
    
    // C√≥digo com poss√≠veis problemas
    variavel x = 10
    variavel y = 0
    
    // IA detecta: poss√≠vel divis√£o por zero
    se (y diferente 0) {
        variavel resultado = x dividido y
        imprimir("Resultado: " + resultado)
    } senao {
        imprimir("Erro: Divis√£o por zero detectada pela IA")
    }
    
    // IA sugere otimiza√ß√µes
    variavel array = []
    para (variavel i = 0; i menor 1000; i = i mais 1) {
        array.push(i)
    }
    
    // IA sugere: usar Array.from para melhor performance
    variavel arrayOtimizado = Array.from({length: 1000}, (_, i) => i)
    imprimir("Array otimizado criado com " + arrayOtimizado.length + " elementos")
}

// Fun√ß√£o para demonstrar gera√ß√£o de c√≥digo
funcao exemploGeracao() {
    imprimir("=== Gera√ß√£o de C√≥digo com IA ===")
    
    // IA gera fun√ß√£o baseada em descri√ß√£o
    // Descri√ß√£o: "Criar fun√ß√£o que verifica se um n√∫mero √© primo"
    funcao verificarPrimo(numero) {
        se (numero menor 2) {
            retornar falso
        }
        
        para (variavel i = 2; i menor numero; i = i mais 1) {
            se (numero modulo i igual 0) {
                retornar falso
            }
        }
        
        retornar verdadeiro
    }
    
    // Testar fun√ß√£o gerada
    imprimir("7 √© primo? " + verificarPrimo(7))
    imprimir("8 √© primo? " + verificarPrimo(8))
    imprimir("13 √© primo? " + verificarPrimo(13))
}

// Fun√ß√£o para demonstrar debugging inteligente
funcao exemploDebugging() {
    imprimir("=== Debugging Inteligente com IA ===")
    
    // C√≥digo com bug intencional
    variavel contador = 0
    
    // IA detecta: loop infinito potencial
    enquanto (contador menor 10) {
        imprimir("Contador: " + contador)
        // IA sugere: contador = contador mais 1
        contador = contador mais 1
    }
    
    // IA detecta: poss√≠vel erro de tipo
    variavel texto = "123"
    variavel numero = parseInt(texto)
    imprimir("N√∫mero convertido: " + numero)
}

// Fun√ß√£o para demonstrar otimiza√ß√£o autom√°tica
funcao exemploOtimizacao() {
    imprimir("=== Otimiza√ß√£o Autom√°tica com IA ===")
    
    // C√≥digo n√£o otimizado
    variavel inicio = Date.now()
    
    variavel resultado = 0
    para (variavel i = 0; i menor 1000000; i = i mais 1) {
        resultado = resultado mais i
    }
    
    variavel fim = Date.now()
    variavel tempo = fim menos inicio
    
    imprimir("Resultado: " + resultado)
    imprimir("Tempo (n√£o otimizado): " + tempo + "ms")
    
    // IA sugere otimiza√ß√£o matem√°tica
    inicio = Date.now()
    
    // F√≥rmula: n * (n + 1) / 2
    variavel n = 1000000
    resultado = n vezes (n mais 1) dividido 2
    
    fim = Date.now()
    tempo = fim menos inicio
    
    imprimir("Resultado (otimizado): " + resultado)
    imprimir("Tempo (otimizado): " + tempo + "ms")
}

// Fun√ß√£o para demonstrar tradu√ß√£o de c√≥digo
funcao exemploTraducao() {
    imprimir("=== Tradu√ß√£o de C√≥digo com IA ===")
    
    // C√≥digo em portugu√™s
    variavel codigoPortugues = `
        funcao calcularArea(raio) {
            retornar 3.14159 vezes raio elevado 2
        }
    `
    
    imprimir("C√≥digo em portugu√™s:")
    imprimir(codigoPortugues)
    
    // IA traduz para ingl√™s
    variavel codigoIngles = `
        function calculateArea(radius) {
            return 3.14159 * radius ** 2
        }
    `
    
    imprimir("C√≥digo traduzido para ingl√™s:")
    imprimir(codigoIngles)
}

// Fun√ß√£o para demonstrar an√°lise de complexidade
funcao exemploAnaliseComplexidade() {
    imprimir("=== An√°lise de Complexidade com IA ===")
    
    // Fun√ß√£o complexa para an√°lise
    funcao processarDados(dados) {
        se (dados.length igual 0) {
            retornar []
        }
        
        variavel resultado = []
        
        para (variavel i = 0; i menor dados.length; i = i mais 1) {
            variavel item = dados[i]
            
            se (item.tipo igual "numero") {
                se (item.valor maior 0) {
                    resultado.push(item.valor vezes 2)
                } senao {
                    resultado.push(0)
                }
            } senao se (item.tipo igual "texto") {
                se (item.valor.length maior 5) {
                    resultado.push(item.valor.toUpperCase())
                } senao {
                    resultado.push(item.valor)
                }
            } senao {
                resultado.push("tipo_nao_suportado")
            }
        }
        
        retornar resultado
    }
    
    // IA analisa complexidade ciclom√°tica
    imprimir("Complexidade ciclom√°tica: 6 (Alta)")
    imprimir("Sugest√µes de melhoria:")
    imprimir("- Extrair l√≥gica de processamento para fun√ß√µes menores")
    imprimir("- Usar switch em vez de if-else aninhados")
    imprimir("- Adicionar valida√ß√£o de entrada")
}

// Fun√ß√£o para demonstrar gera√ß√£o de testes
funcao exemploGeracaoTestes() {
    imprimir("=== Gera√ß√£o de Testes com IA ===")
    
    // Fun√ß√£o para testar
    funcao somar(a, b) {
        retornar a mais b
    }
    
    // IA gera testes automaticamente
    funcao testarSomar() {
        // Teste 1: n√∫meros positivos
        variavel resultado1 = somar(2, 3)
        se (resultado1 igual 5) {
            imprimir("‚úÖ Teste 1 passou: somar(2, 3) = 5")
        } senao {
            imprimir("‚ùå Teste 1 falhou: esperado 5, obtido " + resultado1)
        }
        
        // Teste 2: n√∫meros negativos
        variavel resultado2 = somar(-2, -3)
        se (resultado2 igual -5) {
            imprimir("‚úÖ Teste 2 passou: somar(-2, -3) = -5")
        } senao {
            imprimir("‚ùå Teste 2 falhou: esperado -5, obtido " + resultado2)
        }
        
        // Teste 3: zero
        variavel resultado3 = somar(0, 5)
        se (resultado3 igual 5) {
            imprimir("‚úÖ Teste 3 passou: somar(0, 5) = 5")
        } senao {
            imprimir("‚ùå Teste 3 falhou: esperado 5, obtido " + resultado3)
        }
    }
    
    testarSomar()
}

// Fun√ß√£o principal
funcao main() {
    imprimir("ü§ñ === Funcionalidades de IA Integradas ===")
    imprimir("Stack Extens√£o com IA nativa para desenvolvimento")
    imprimir("")
    
    exemploCompletacao()
    imprimir("")
    
    exemploAnalise()
    imprimir("")
    
    exemploGeracao()
    imprimir("")
    
    exemploDebugging()
    imprimir("")
    
    exemploOtimizacao()
    imprimir("")
    
    exemploTraducao()
    imprimir("")
    
    exemploAnaliseComplexidade()
    imprimir("")
    
    exemploGeracaoTestes()
    imprimir("")
    
    imprimir("üéØ === IA Integrada - Desenvolvimento Inteligente ===")
    imprimir("A IA est√° sempre pronta para ajudar no desenvolvimento!")
}

// Executar
main()